# Generated by Django 2.1.7 on 2019-03-06 19:38

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import gcc.models
import prologin.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('centers', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
            ],
        ),
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', prologin.models.EnumField(gcc.models.ApplicantStatusTypes, blank=True, choices=[(0, 'incomplete'), (1, 'pending'), (2, 'rejected'), (3, 'selected'), (4, 'accepted'), (5, 'confirmed')], db_index=True, default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ApplicantLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Corrector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Edition',
            fields=[
                ('year', models.PositiveIntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'ordering': ['-year'],
                'get_latest_by': ['year'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_start', models.DateTimeField()),
                ('event_end', models.DateTimeField()),
                ('signup_start', models.DateTimeField()),
                ('signup_end', models.DateTimeField()),
                ('center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='centers.Center')),
                ('edition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcc.Edition')),
            ],
        ),
        migrations.CreateModel(
            name='EventWish',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcc.Applicant')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcc.Event')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('comment', models.TextField(blank=True)),
                ('response_type', prologin.models.EnumField(gcc.models.AnswerTypes, choices=[(0, 'Boolean'), (1, 'Integer'), (2, 'Date'), (3, 'String'), (4, 'Text'), (5, 'Multichoice')])),
                ('required', models.BooleanField(default=False)),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('postal_code', models.CharField(blank=True, max_length=32, verbose_name='Postal code')),
                ('city', models.CharField(blank=True, max_length=64, verbose_name='City')),
                ('country', models.CharField(blank=True, max_length=64, verbose_name='Country')),
                ('contact_gender', prologin.models.GenderField(blank=True, choices=[(None, 'Other or prefer not to tell'), (0, 'Male'), (1, 'Female')], null=True, verbose_name='Gender')),
                ('contact_position', models.CharField(blank=True, max_length=128)),
                ('contact_first_name', models.CharField(blank=True, max_length=64)),
                ('contact_last_name', models.CharField(blank=True, max_length=64)),
                ('contact_phone_desk', models.CharField(blank=True, max_length=16)),
                ('contact_phone_mobile', models.CharField(blank=True, max_length=16)),
                ('contact_phone_fax', models.CharField(blank=True, max_length=16)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('logo', models.ImageField(blank=True, upload_to=gcc.models.Sponsor.upload_logo_to)),
                ('site', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubscriberEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='form',
            name='question_list',
            field=models.ManyToManyField(to='gcc.Question'),
        ),
        migrations.AddField(
            model_name='event',
            name='signup_form',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gcc.Form'),
        ),
        migrations.AddField(
            model_name='edition',
            name='signup_form',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcc.Form'),
        ),
        migrations.AddField(
            model_name='corrector',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='correctors', to='gcc.Event'),
        ),
        migrations.AddField(
            model_name='corrector',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='applicant',
            name='assignation_event',
            field=models.ManyToManyField(blank=True, related_name='assigned_applicants', to='gcc.Event'),
        ),
        migrations.AddField(
            model_name='applicant',
            name='assignation_wishes',
            field=models.ManyToManyField(blank=True, related_name='applicants', through='gcc.EventWish', to='gcc.Event'),
        ),
        migrations.AddField(
            model_name='applicant',
            name='edition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcc.Edition'),
        ),
        migrations.AddField(
            model_name='applicant',
            name='labels',
            field=models.ManyToManyField(blank=True, to='gcc.ApplicantLabel'),
        ),
        migrations.AddField(
            model_name='applicant',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='applicant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='gcc.Applicant'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gcc.Question'),
        ),
        migrations.AlterUniqueTogether(
            name='eventwish',
            unique_together={('applicant', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='applicant',
            unique_together={('user', 'edition')},
        ),
        migrations.AlterUniqueTogether(
            name='answer',
            unique_together={('applicant', 'question')},
        ),
    ]
